version: "3.9"
services:
  frontend:
    image: front
    container_name: frontend-service
    restart: on-failure
    ports:
      - "8080:8080"
    networks:
      - estore
    depends_on:
      backend:
        condition: service_healthy
  backend:
    image: back
    container_name: backend-service
    restart: on-failure
    ports:
      - "8081:8081"
    environment:
      DB_URL: jdbc:postgresql://postgres-db:5432/estore
      DB_USER: user
      DB_PASSWORD: password
    healthcheck:
      test: curl -m 5 --silent --fail --request GET http://localhost:8081/actuator/health | jq --exit-status -n 'inputs | if has("status") then .status=="UP" else false end' > /dev/null || exit 1
      start_period: 10s
      interval: 10s
      retries: 10
      timeout: 1s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
    networks:
      - estore
    depends_on:
      postgres:
        condition: service_healthy
  postgres:
    image: library/postgres:14
    container_name: postgres-db
    restart: on-failure
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: estore
    healthcheck:
      test: pg_isready -U user -d estore
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 25s
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          memory: 256M
    networks:
      - estore
volumes:
  postgres_data:
    name: postgres_data
networks:
  estore:
    driver: bridge